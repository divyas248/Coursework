#include "m1.h"
#include "m2.h"
#include "graphics.h"
#include "easygl_constants.h"
#include <string>
#include <cmath>
#include <cfloat>
#include <X11/Xlib.h>
#include <supportDataM2.h>

// Draws the map whose at map_path; this should be a .bin file.
void draw_map(std::string map_path) {
    load_map(map_path);
    
    //Initialize arrays for the hover text feature
    for (unsigned t=0;t<HOVER_GRID;t++)
        for (unsigned g=0;g<HOVER_GRID;g++){
            hoverGrid[t][g]=False;
            hoverGridID[t][g]=0;
        }
    
    init_graphics("Team 040's Map", pale);
    
    set_visible_world(minLongitude, minLatitude, maxLongitude, maxLatitude);
    
    update_message(map_path);
        
    // Set up a area threshold to compare against.
    t_bound_box tmpBoundBox(minLongitude, minLatitude, maxLongitude, maxLatitude);
    initialArea = tmpBoundBox.area();
    
    event_loop(NULL, NULL, NULL, draw_screen);
    
    close_graphics();
}

// Redraw the screen after each event loop.
void draw_screen(void) {
    clearscreen();
    
    // Draw all water (water, ponds, lakes, lagoons, rivers, and streams) features.
    draw_water();
    
    // Draw the remaining closed features (woods, grasslands, sand, beaches, and islands).
    draw_closed_features();
    
    // Find the coordinates of the current visible world.
    t_bound_box boxCurrent = get_visible_world();
    boxAreaCurrent = boxCurrent.area();
    tmpLeft = boxCurrent.left();
    tmpRight = boxCurrent.right();
    tmpTop = boxCurrent.top();
    tmpBot = boxCurrent.bottom();
    
    
    
    // ratioZoom gives the ratio of the current screen to the initial screen area.
    float ratioZoom = (boxAreaCurrent / initialArea);

    cout << ratioZoom << endl;
    
    // lengthBound is the limit based on the average street length.
    float lengthBound = longestLength * ratioZoom;
    
    // Draw the streets based on the level of zoom.
    draw_streets(ratioZoom, lengthBound, tmpLeft, tmpRight, tmpBot, tmpTop);
    
    // Draw the street names based on the level of zoom.
    draw_street_names(ratioZoom, lengthBound, tmpLeft, tmpRight, tmpBot, tmpTop);
    
    // If a certain zoom threshold is passed, draw POIs.
    if(ratioZoom < POI_THRESHOLD) {
        draw_POI(tmpLeft, tmpRight, tmpBot, tmpTop);
    }
}

// Draw all water (water, ponds, lakes, lagoons, rivers, and streams) features.
void draw_water(void) {
    for(auto iter = mapFeatures.begin(); iter != mapFeatures.end(); iter++) {
        string attribute = iter->second.getAttribute();
        
        // First, draw closed features.
        if(attribute == "water" || attribute == "pond" || attribute == "lake" || attribute == "lagoon") {
            t_point polyPoints[iter->second.getFeaturePointCount()];
            
            vector<LatLon> latLonPoints = iter->second.getVectorFeaturePoints();
            
            // Convert LatLon to x and y coordinates for t_point object, which is
            // to be used by fillpoly.
            for(unsigned i = 0; i < iter->second.getFeaturePointCount(); i++) {
                polyPoints[i].x = latLonPoints[i].lon;
                polyPoints[i].y = latLonPoints[i].lat;
            }
            
            setcolor(LIGHTSKYBLUE);
            fillpoly(polyPoints, iter->second.getFeaturePointCount());
        }
        
        // Second, draw open features.
        if(attribute == "river" || attribute == "stream") {
            vector<LatLon> curvePoints = iter->second.getVectorFeaturePoints();
            
            setcolor(LIGHTSKYBLUE);
            setlinewidth(1);
            
            unsigned curvePointCount = curvePoints.size();
            
            // Convert LatLon to x and y coordinates to be used by drawline.
            // Iterate through curvePoints and save the previous coordinates
            // to draw a continuous line.
            for(unsigned i = 1; i < curvePointCount; i++) {
                double x = curvePoints[i].lon;
                double y = curvePoints[i].lat;
                
                double x_prev = curvePoints[i - 1].lon;
                double y_prev = curvePoints[i - 1].lat;
                
                drawline(x_prev, y_prev, x, y);
            }
        }
    }
}

// Draw the remaining closed features (woods, grasslands, sand, beaches, and islands).
void draw_closed_features(void) {
    for(auto iter = mapFeatures.begin(); iter != mapFeatures.end(); iter++) {
        string attribute = iter->second.getAttribute();
        
        if(attribute == "wood" || attribute == "grassland" || attribute == "sand"
                || attribute == "beach" || attribute == "island") {
            
            t_point polyPoints[iter->second.getFeaturePointCount()];
            
            vector<LatLon> latLonPoints = iter->second.getVectorFeaturePoints();
            
            // Convert LatLon to x and y coordinates for t_point object, which is
            // to be used by fillpoly.
            for(unsigned i = 0; i < iter->second.getFeaturePointCount(); i++) {
                polyPoints[i].x = latLonPoints[i].lon;
                polyPoints[i].y = latLonPoints[i].lat;
            }
            
            if(attribute == "sand" || attribute == "beach") {
                setcolor(KHAKI);
            }
            
            else if(attribute == "wood" || attribute == "grassland") {
                setcolor(LIMEGREEN);
            }
            
            else if(attribute == "island") {
                setcolor(pale);
            }
            
            fillpoly(polyPoints, iter->second.getFeaturePointCount());
        }
    }
}

// Draw the streets based on the level of zoom.
void draw_streets(float ratioZoom, float lengthBound, float tmpLeft, float tmpRight, float tmpBot, float tmpTop) {
    for(auto iter = mapStreet.begin(); iter!= mapStreet.end(); iter++) {
        string streetName = iter->first;
        double streetLength = iter->second.getLength();
        
        // Get the average speed of the street.
        vector<unsigned> segments = iter->second.getStreetSegIDs();
        unsigned numSegments = segments.size();
        unsigned streetSpeed = 0;
        
        if(numSegments == 0) {
            streetSpeed = 0;
        }
        
        else {
            for(auto segmentIter = segments.begin(); segmentIter!= segments.end(); segmentIter++) {
                streetSpeed += mapStreetSeg.find(*segmentIter)->second.getSpeed();
            }

            streetSpeed = streetSpeed / numSegments;
        }
        
        // First: check if the screen is zoomed in, if so draw everything.
        // Second: draw all street segments that are part of the longest streets.
        if((streetLength * SCALE_FACTOR > lengthBound && streetName != "(unknown)") || (ratioZoom < HIGH_ZOOM)
                || (streetSpeed > FAST_ROAD_THRESHOLD)) { 
            vector<unsigned> segments = iter->second.getStreetSegIDs();            
            
            for(auto segmentIter = segments.begin(); segmentIter!= segments.end(); segmentIter++) {
                vector<LatLon> curvePoints = mapStreetSeg.find(*segmentIter)->second.getCurves();
                double x_from = getIntersectionPosition(mapStreetSeg.find(*segmentIter)->second.getFrom()).lon;
                double y_from = getIntersectionPosition(mapStreetSeg.find(*segmentIter)->second.getFrom()).lat;
                
                double x_to = getIntersectionPosition(mapStreetSeg.find(*segmentIter)->second.getTo()).lon;
                double y_to = getIntersectionPosition(mapStreetSeg.find(*segmentIter)->second.getTo()).lat;
                
                if(streetSpeed > FAST_ROAD_THRESHOLD) {
                    setcolor(ORANGE);
                    setlinewidth(2);
                }
                
                else {
                    setcolor(WHITE);
                    setlinewidth(1);
                }
                
                // Enable drawing only if a street lies in the screen.
                if(curvePoints.empty() && (((x_from>tmpLeft)&& x_from<tmpRight) || (x_to>tmpLeft && x_to<tmpRight)) &&
                        (((y_from>tmpBot)&& y_from<tmpTop) || (y_to>tmpBot && y_to<tmpTop))) {
                    
                    drawline(x_from, y_from, x_to, y_to);
                }
                
                else if ((((x_from>tmpLeft)&& x_from<tmpRight) || (x_to>tmpLeft && x_to<tmpRight))&&(((y_from>tmpBot)&& y_from<tmpTop) ||
                        (y_to>tmpBot && y_to<tmpTop))) {
                    unsigned curvePointCount = curvePoints.size();
                    
                    // Draw from the "from" intersection to the first curvePoint.
                    // Then iteratively draw lines between the curvePoints.
                    // Finally, connect the last curvePoint to the "to" intersection.
                    
                    double x = curvePoints[0].lon;
                    double y = curvePoints[0].lat;
                    
                    drawline(x_from, y_from, x, y);
                    
                    for(unsigned j = 1; j < curvePointCount; j++) {
                        x = curvePoints[j].lon;
                        y = curvePoints[j].lat;
                        
                        double x_prev = curvePoints[j - 1].lon;
                        double y_prev = curvePoints[j - 1].lat;
                        
                        drawline(x_prev, y_prev, x, y);
                    }
                    
                    drawline(curvePoints[curvePointCount - 1].lon, curvePoints[curvePointCount - 1].lat, x_to, y_to);
                }  
            }
        }
    }
}

// Draw the street names based on the level of zoom.
void draw_street_names(float ratioZoom, float lengthBound, float tmpLeft, float tmpRight, float tmpBot, float tmpTop) {    
    // Divide the screen into a grid, with each entry initialized to 0.
    bool grid[NUM_GRID][NUM_GRID];
    for(int i = 0; i < NUM_GRID; i++) {
        for(int j = 0; j < NUM_GRID; j++) {
            grid[i][j] = 0;
        }
    }
    
    for(auto iter = mapStreet.begin(); iter!= mapStreet.end(); iter++) {
        string streetName = iter->first;
        
        // Truncate the street name if it is too long.
        if(streetName.length() > MAX_NAME_LENGTH) {
            streetName.erase(streetName.begin() + MAX_NAME_LENGTH - 3, streetName.end());
            streetName = streetName + "...";
        }

        double streetLength = iter->second.getLength();
        
        // Get the average speed of the street.
        vector<unsigned> segments = iter->second.getStreetSegIDs();
        unsigned numSegments = segments.size();
        unsigned streetSpeed = 0;
        
        if(numSegments == 0) {
            streetSpeed = 0;
        }
        
        else {
            for(auto segmentIter = segments.begin(); segmentIter!= segments.end(); segmentIter++) {
                streetSpeed += mapStreetSeg.find(*segmentIter)->second.getSpeed();
            }

            streetSpeed = streetSpeed / numSegments;
        }
        
        // First: check if the screen is zoomed in, if so draw everything.
        // Second: draw all street segments that are part of the longest streets.
        if((streetLength * SCALE_FACTOR > lengthBound && streetName != "(unknown)") || (ratioZoom < HIGH_ZOOM)
                || (streetSpeed > FAST_ROAD_THRESHOLD)) { 
            vector<unsigned> segments = iter->second.getStreetSegIDs();            
            
            for(auto segmentIter=segments.begin(); segmentIter!= segments.end(); segmentIter++) {
                vector<LatLon> curvePoints = mapStreetSeg.find(*segmentIter)->second.getCurves();
                double x_from = getIntersectionPosition(mapStreetSeg.find(*segmentIter)->second.getFrom()).lon;
                double y_from = getIntersectionPosition(mapStreetSeg.find(*segmentIter)->second.getFrom()).lat;
                
                double x_to = getIntersectionPosition(mapStreetSeg.find(*segmentIter)->second.getTo()).lon;
                double y_to = getIntersectionPosition(mapStreetSeg.find(*segmentIter)->second.getTo()).lat;
                
                // Draw the street name at the center of each street segment.
                double x_avg, y_avg, degrees;
                x_avg = (x_from + x_to) / 2;
                y_avg = (y_from + y_to) / 2;
                
                // Calculate the angle at which to draw the text.
                if(x_from <= x_to) {
                    degrees = atan2(y_to - y_from, x_to - x_from) * RAD_TO_DEGREES;
                }
                
                else {
                    degrees = atan2(y_from - y_to, x_from - x_to) * RAD_TO_DEGREES;
                }
                
                unsigned curvePointCount = curvePoints.size();
                
                if ((((x_from>tmpLeft)&& x_from<tmpRight) || (x_to>tmpLeft && x_to<tmpRight))&&(((y_from>tmpBot)&& y_from<tmpTop) ||
                        (y_to>tmpBot && y_to<tmpTop)) && curvePointCount != 0) {                    
                    double middle = floor(curvePointCount / 2);
                    
                    x_avg = curvePoints[middle].lon;
                    y_avg = curvePoints[middle].lat;   
                }
                
                int x_index = floor((x_avg - tmpLeft) / ((tmpRight - tmpLeft) / (NUM_GRID - 1)));
                int y_index = floor((y_avg - tmpBot) / ((tmpTop - tmpBot) / (NUM_GRID - 1)));
                
                if(!(x_index < 0 || x_index >= NUM_GRID || y_index < 0 || y_index >= NUM_GRID)) {
                    // Do not draw the street name if it is unknown or off of the map.
                    if(streetName != "(unknown)" && (((x_from > tmpLeft && x_from < tmpRight) && 
                            (y_from > tmpBot && y_from < tmpTop)) || ( (x_to > tmpLeft && x_to < tmpRight) && 
                            (y_to > tmpBot && y_to < tmpTop))) && grid[x_index][y_index] == 0) {
                        
                        
                        
                        setcolor(BLACK);
                        settextattrs(8, degrees);

                        // Always draw the street names for streets with a high speed limit.
                        if(streetSpeed > FAST_ROAD_THRESHOLD) {
                            drawtext(x_avg, y_avg, streetName, FLT_MAX, FLT_MAX);
                        }

                        // Draw relatively long streets after a certain level of zoom.
                        else if(streetLength > MED_ROAD_LENGTH && ratioZoom < MED_ZOOM) {
                            drawtext(x_avg, y_avg, streetName, FLT_MAX, FLT_MAX);
                        }

                        else {
                            drawtext(x_avg, y_avg, streetName, abs(x_to - x_from), abs(y_to - y_from));
                        }
                        
                        grid[x_index][y_index] = 1;
                    }
                }
            }
        }
    }
}

// Draw a red circle at all points of interest.
void draw_POI(float tmpLeft, float tmpRight, float tmpBot, float tmpTop) {

    for (unsigned t=0;t<HOVER_GRID;t++)
        for (unsigned g=0;g<HOVER_GRID;g++){
            hoverGrid[t][g]=False;
            hoverGridID[t][g]=0;
        }
            
    float xDifferences=abs (tmpLeft-tmpRight)/HOVER_GRID;
    float yDifferences=abs(tmpTop-tmpBot)/HOVER_GRID;
    
    for(auto iter = mapPOI.begin(); iter!= mapPOI.end(); iter++) {
        double x = iter->second.getLatLon().lon;
        double y = iter->second.getLatLon().lat;

        if(y > tmpBot && y < tmpTop && x > tmpLeft && x < tmpRight) {
            string interestName = iter->second.getName();
            setcolor(RED);
            fillarc(x, y, POI_RADIUS, 0, 360);
            
            //This uses a 20x20 grid to determine if a mouse is hovering over a region
            unsigned xGridValue=int(floor(abs(x-tmpRight)/xDifferences))%HOVER_GRID;
            unsigned yGridValue=int(floor(abs(y-tmpBot)/yDifferences))%HOVER_GRID;

            // tell the event loop which grid is being hovered over
            hoverGrid[xGridValue][yGridValue]=true;
            
            // tell the event loop which point of interest in the hovered over grid
            hoverGridID[xGridValue][yGridValue]=iter->first;    

        }
    }
    cout<<""<<endl;
}

//given a POI ID print the text beside it
void draw_POI_text(unsigned id_poi){
    //find the latlon of the poi and display the text there
    
    float zoomRatio=boxAreaCurrent/initialArea;
if (zoomRatio<POI_HOVER_THRESHOLD){
    LatLon textLatLon=mapPOI.find(id_poi)->second.getLatLon();
    string displayText=mapPOI.find(id_poi)->second.getName();
    setcolor(BLACK);
    settextattrs(TEXT_FONT_12, 0);
    //create the text slightly above the POI
    drawtext(textLatLon.lon, textLatLon.lat+HOVER_TEXT_OFFSET, displayText, FLT_MAX, FLT_MAX);
}
}

void callSearchFunction(std::string input_string){
    return;
}