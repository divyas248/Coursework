#include "StreetSegmentEnds.h"
#include "StreetsDatabaseAPI.h"
#include "m1.h"
#include "m2.h"
#include <vector>
#include <unordered_map>
#include <iostream>
#include <algorithm>
#include <complex>
#include "../../libstreetsdatabase/src/LatLon.h"
#include <cmath>
#include "graphics.h"
#include "easygl_constants.h"
<<<<<<< .working
using namespace std;
=======
#include <string>
#include <cmath>
#include <cfloat>
#include <X11/Xlib.h>
>>>>>>> .merge-right.r78

using namespace std;

// Create the background colour for the map.
t_color pale(229, 227, 223);

bool hoverGrid[HOVER_GRID][HOVER_GRID];
unsigned hoverGridID[HOVER_GRID][HOVER_GRID];
float initialArea;
float boxAreaCurrent;
float tmpLeft;
float tmpRight;
float tmpTop;
float tmpBot;

// Draws the map whose at map_path; this should be a .bin file.
void draw_map(string map_path) {
    load_map(map_path);
    
    init_graphics("Title at top", WHITE);
    
    set_visible_world(0., 0., 1000., 1000.);
    
    draw_screen();
    
    update_message("Message at bottom");
    
    event_loop(NULL, NULL, NULL, draw_screen);
    
    close_graphics();
    
    close_map();
}

// Draws the screen
void draw_screen(void) {
    clearscreen();
    
    draw_streets();
    
    setcolor(BLACK);
    
}

// React to mouse button clicked
void act_on_mouse_button(float x, float y, t_event_buttonPressed buttonPressed) {
    
<<<<<<< .working
=======
    for(auto iter = mapStreet.begin(); iter!= mapStreet.end(); iter++) {
        string streetName = iter->first;
        
        // Truncate the street name if it is too long.
        if(streetName.length() > MAX_NAME_LENGTH) {
            streetName.erase(streetName.begin() + MAX_NAME_LENGTH - 3, streetName.end());
            streetName = streetName + "...";
        }

        double streetLength = iter->second.getLength();
        
        // Get the average speed of the street.
        vector<unsigned> segments = iter->second.getStreetSegIDs();
        unsigned numSegments = segments.size();
        unsigned streetSpeed = 0;
        
        if(numSegments == 0) {
            streetSpeed = 0;
        }
        
        else {
            for(auto segmentIter = segments.begin(); segmentIter!= segments.end(); segmentIter++) {
                streetSpeed += mapStreetSeg.find(*segmentIter)->second.getSpeed();
            }

            streetSpeed = streetSpeed / numSegments;
        }
        
        // First: check if the screen is zoomed in, if so draw everything.
        // Second: draw all street segments that are part of the longest streets.
        if((streetLength * SCALE_FACTOR > lengthBound && streetName != "(unknown)") || (ratioZoom < HIGH_ZOOM)
                || (streetSpeed > FAST_ROAD_THRESHOLD)) { 
            vector<unsigned> segments = iter->second.getStreetSegIDs();            
            
            for(auto segmentIter=segments.begin(); segmentIter!= segments.end(); segmentIter++) {
                vector<LatLon> curvePoints = mapStreetSeg.find(*segmentIter)->second.getCurves();
                double x_from = getIntersectionPosition(mapStreetSeg.find(*segmentIter)->second.getFrom()).lon;
                double y_from = getIntersectionPosition(mapStreetSeg.find(*segmentIter)->second.getFrom()).lat;
                
                double x_to = getIntersectionPosition(mapStreetSeg.find(*segmentIter)->second.getTo()).lon;
                double y_to = getIntersectionPosition(mapStreetSeg.find(*segmentIter)->second.getTo()).lat;
                
                // Draw the street name at the center of each street segment.
                double x_avg, y_avg, degrees;
                x_avg = (x_from + x_to) / 2;
                y_avg = (y_from + y_to) / 2;
                
                // Calculate the angle at which to draw the text.
                if(x_from <= x_to) {
                    degrees = atan2(y_to - y_from, x_to - x_from) * RAD_TO_DEGREES;
                }
                
                else {
                    degrees = atan2(y_from - y_to, x_from - x_to) * RAD_TO_DEGREES;
                }
                
                unsigned curvePointCount = curvePoints.size();
                
                if ((((x_from>tmpLeft)&& x_from<tmpRight) || (x_to>tmpLeft && x_to<tmpRight))&&(((y_from>tmpBot)&& y_from<tmpTop) ||
                        (y_to>tmpBot && y_to<tmpTop)) && curvePointCount != 0) {                    
                    double middle = floor(curvePointCount / 2);
                    
                    x_avg = curvePoints[middle].lon;
                    y_avg = curvePoints[middle].lat;   
                }
                
                int x_index = floor((x_avg - tmpLeft) / ((tmpRight - tmpLeft) / (NUM_GRID - 1)));
                int y_index = floor((y_avg - tmpBot) / ((tmpTop - tmpBot) / (NUM_GRID - 1)));
                
                if(!(x_index < 0 || x_index >= NUM_GRID || y_index < 0 || y_index >= NUM_GRID)) {
                    // Do not draw the street name if it is unknown or off of the map.
                    if(streetName != "(unknown)" && (((x_from > tmpLeft && x_from < tmpRight) || 
                            (x_to > tmpLeft && x_to < tmpRight)) && ((y_from > tmpBot && y_from < tmpTop) || 
                            (y_to > tmpBot && y_to < tmpTop))) && grid[x_index][y_index] == 0) {
                        setcolor(BLACK);
                        settextattrs(8, degrees);

                        // Always draw the street names for streets with a high speed limit.
                        if(streetSpeed > FAST_ROAD_THRESHOLD) {
                            drawtext(x_avg, y_avg, streetName, FLT_MAX, FLT_MAX);
                        }

                        // Draw relatively long streets after a certain level of zoom.
                        else if(streetLength > MED_ROAD_LENGTH && ratioZoom < MED_ZOOM) {
                            drawtext(x_avg, y_avg, streetName, FLT_MAX, FLT_MAX);
                        }

                        else {
                            drawtext(x_avg, y_avg, streetName, abs(x_to - x_from), abs(y_to - y_from));
                        }
                        
                        grid[x_index][y_index] = 1;
                    }
                }
            }
        }
    }
}

// Draw a red circle at all points of interest.
void draw_POI(float tmpLeft, float tmpRight, float tmpBot, float tmpTop) {
    
    //create some sort of boolean grid
    for (unsigned t=0;t<HOVER_GRID;t++)
        for (unsigned g=0;g<HOVER_GRID;g++){
            hoverGrid[t][g]=False;
            hoverGridID[t][g]=0;
        }
            
    float xDifferences=abs (tmpLeft-tmpRight)/HOVER_GRID;
    float yDifferences=abs(tmpTop-tmpBot)/HOVER_GRID;
>>>>>>> .merge-right.r78
    
<<<<<<< .working
=======
    for(auto iter = mapPOI.begin(); iter!= mapPOI.end(); iter++) {
        double x = iter->second.getLatLon().lon;
        double y = iter->second.getLatLon().lat;

        // Check if the POI is within the screen before drawing it.
        //if(y > tmpBot && y < tmpTop && x > tmpLeft && x < tmpRight)
        //    cout<<"x: "<< x<< "y: "<< y<<endl;
        if(y > tmpBot && y < tmpTop && x > tmpLeft && x < tmpRight) {
            string interestName = iter->second.getName();
            setcolor(RED);
            fillarc(x, y, POI_RADIUS, 0, 360);
            
            //This uses a 20x20 grid to determine if a mouse is hovering over a region
            unsigned xGridValue=int(floor(abs(x-tmpRight)/xDifferences))%HOVER_GRID;
            unsigned yGridValue=int(floor(abs(y-tmpBot)/yDifferences))%HOVER_GRID;
            
            //cout<< "x: "<<xGridValue<<endl;
            //cout<< "y: "<<yGridValue<<endl;
            
            // tell the event loop which grid is being hovered over
            hoverGrid[xGridValue][yGridValue]=true;
            
            // tell the event loop which point of interest in the hovered over grid
            hoverGridID[xGridValue][yGridValue]=iter->first;    

        }
    }
    cout<<""<<endl;
>>>>>>> .merge-right.r78
}

<<<<<<< .working
// Draw the streets of the designated city
void draw_streets(void) {
   
=======
//given a POI ID print the text beside it
void draw_POI_text(unsigned id_poi){
    //find the latlon of the poi and display the text there
    
    LatLon textLatLon=mapPOI.find(id_poi)->second.getLatLon();
    string displayText=mapPOI.find(id_poi)->second.getName();
    setcolor(BLACK);
    settextattrs(8, 0);
    //create the text slightly above the POI
    drawtext(textLatLon.lon, textLatLon.lat+HOVER_TEXT_OFFSET, displayText, FLT_MAX, FLT_MAX);
>>>>>>> .merge-right.r78
}